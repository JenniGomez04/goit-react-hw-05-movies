{"version":3,"file":"static/js/645.90cebd4c.chunk.js","mappings":"sSAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIP,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qIAGoBN,EAASO,IAH7B,+CAGKC,EAHL,EAGKA,KAHL,kBAIIA,EAAKC,SAJT,2HAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,kFACCC,EADD,iBACmBD,GADnB,kBAGoBX,EAASO,IAAIK,GAHjC,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BF,GAA/B,kFACCC,EADD,iBACmBD,EADnB,8BAGoBX,EAASO,IAAIK,GAHjC,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,kFACCC,EADD,iBACmBD,EADnB,8BAGoBX,EAASO,IAAIK,GAHjC,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kFACCJ,EADD,8BACgCI,GADhC,kBAGoBhB,EAASO,IAAIK,GAHjC,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2H,iHCwCP,UAlFe,WACb,OAAwBS,EAAAA,EAAAA,UAAS,MAAjC,eAAOT,EAAP,KAAaU,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaf,IAAI,SAErC,GAA0BU,EAAAA,EAAAA,WAAS,kBAAMO,GAAe,EAArB,IAAnC,eAAOZ,EAAP,KAAca,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,sGAEZT,GAAW,GAFC,UAGcL,EAAAA,EAAAA,IAAaS,GAH3B,gBAGJf,EAHI,EAGJA,QACRS,EAAQT,GACRW,GAAW,GALC,kDAOZU,QAAQC,IAAR,MAPY,yBASZX,GAAW,GATC,6EAAH,qDAYTI,GACFK,GAEH,GAAE,CAACL,IAWJ,OACE,iCACE,4BACE,4CAEA,kBAAMQ,SAVS,SAAAC,GACnBA,EAAEC,iBACFX,EAAgB,CAAEX,MAAOA,GAC1B,EAOK,WACE,kBACEuB,MAAOvB,EACPwB,SAjBW,SAAAH,GACnBR,EAASQ,EAAEI,OAAOF,MACnB,EAgBSG,KAAK,SACLC,KAAK,OACLC,YAAY,eAGd,mBAAQD,KAAK,SAAb,2BAKJ,wBACGf,EACCL,EACE,aACEX,EAAKiC,OAAS,EAChBjC,EAAKkC,KAAI,gBAAGC,EAAH,EAAGA,MAAOhC,EAAV,EAAUA,GAAV,OACP,yBACE,SAAC,KAAD,CAAMiC,MAAO,CAAEC,KAAMnB,GAAYoB,GAAE,kBAAanC,GAAhD,SACGgC,KAFIhC,EADF,KAQT,6FAKF,qBAKT,C","sources":["servicesApi/ApiMovies.jsx","views/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'd2c1d24020287e7b546fb1f2d1960a86',\n    language: 'en-US',\n  },\n});\n\nexport async function getTrendingMovies() {\n  const query = `/trending/movie/week`;\n  try {\n    const { data } = await instance.get(query);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieDetails(id) {\n  const query = `/movie/${id}`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieCredits(id) {\n  const query = `/movie/${id}/credits`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieReviews(id) {\n  const query = `/movie/${id}/reviews`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovies(queryString) {\n  const query = `/search/movie?query=${queryString}`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n","//import PropTypes from 'prop-types';\n\nimport { searchMovies } from 'servicesApi/ApiMovies';\n//import { ContainerInput } from './Movies.styled';\n\nimport { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\n\nconst Movies = () => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  const [query, setQuery] = useState(() => searchQuery || '');\n\n  const location = useLocation();\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoading(true);\n        const { results } = await searchMovies(searchQuery);\n        setData(results);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (searchQuery) {\n      getData();\n    }\n  }, [searchQuery]);\n\n  const handleChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: query });\n  };\n\n  return (\n    <>\n      <div >\n        <h2 >Search movies:</h2>\n\n        <form onSubmit={handleSubmit} >\n          <input\n            value={query}\n            onChange={handleChange}\n            name=\"search\"\n            type=\"text\"\n            placeholder=\"Type here\"\n\n          />\n          <button type=\"submit\">\n            Search\n          </button>\n        </form>\n      </div>\n      <ul>\n        {searchQuery ? (\n          loading ? (\n            'Loading...'\n          ) : data.length > 0 ? (\n            data.map(({ title, id }) => (\n              <li key={id} >\n                <Link state={{ from: location }} to={`/movies/${id}`}>\n                  {title}\n                </Link>\n              </li>\n            ))\n          ) : (\n            <p>\n              No movies with this title were found. Try entering another title\n            </p>\n          )\n        ) : (\n          <p ></p>\n        )}\n      </ul>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["instance","axios","baseURL","params","api_key","language","getTrendingMovies","get","data","results","getMovieDetails","id","query","getMovieCredits","getMovieReviews","searchMovies","queryString","useState","setData","loading","setLoading","useSearchParams","searchParams","setSearchParams","searchQuery","setQuery","location","useLocation","useEffect","getData","console","log","onSubmit","e","preventDefault","value","onChange","target","name","type","placeholder","length","map","title","state","from","to"],"sourceRoot":""}
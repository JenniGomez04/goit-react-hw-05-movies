{"version":3,"file":"static/js/736.56ef4477.chunk.js","mappings":"4QAEaA,EAAKC,EAAAA,GAAAA,GAAH,mJASFC,EAAKD,EAAAA,GAAAA,GAAH,wS,SC6Df,EAlEa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,sGAEdF,GAAW,GAFG,UAGMG,EAAAA,EAAAA,IAAgBX,GAHtB,gBAGPG,EAHO,EAGPA,KACPC,EAAQD,GAJM,gDAMdS,QAAQP,MAAM,wDAAd,MACAC,EAAS,KAAMO,SAPD,yBASdL,GAAW,GATG,4EAAH,qDAYfE,GACD,GAAE,CAACV,KAGF,2BACGO,GAAW,aAEXJ,EAAKW,OAAS,GACb,SAACjB,EAAD,UACGM,EAAKY,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC5BC,EAAU,yCAAqCD,GAQnD,OANKA,IACHC,EACE,kFACFH,EAAI,UAAMA,EAAN,2BAIJ,UAAClB,EAAD,YACE,gBAAKsB,IAAKD,EAAYE,IAAKL,KAC3B,4BACE,wBAAKA,KACL,uCAAeC,UAJVF,EAQZ,OAGH,gFAGDX,IACC,0BACE,wDAKT,C,sLC/DKkB,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAKP,SAAeC,IAAtB,+B,aAAO,O,oBAAA,qIAGoBN,EAASO,IAH7B,+CAGKC,EAHL,EAGKA,KAHL,kBAIIA,EAAKC,SAJT,2HAWA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA+BjB,GAA/B,kFACCkB,EADD,iBACmBlB,GADnB,kBAGoBO,EAASO,IAAII,GAHjC,uBAGKH,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAWA,SAAepB,EAAtB,kC,aAAO,O,oBAAA,WAA+BK,GAA/B,kFACCkB,EADD,iBACmBlB,EADnB,8BAGoBO,EAASO,IAAII,GAHjC,uBAGKH,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAWA,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAA+BnB,GAA/B,kFACCkB,EADD,iBACmBlB,EADnB,8BAGoBO,EAASO,IAAII,GAHjC,uBAGKH,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kFACCH,EADD,8BACgCG,GADhC,kBAGoBd,EAASO,IAAII,GAHjC,uBAGKH,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2H","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","servicesApi/ApiMovies.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n`;\n\nexport const Li = styled.li`\n  width: 14%;\n  margin-bottom: 3rem;\n  text-align: center;\n\n  img {\n    margin-top: 20px;\n    max-width: 80%;\n    height: 200px;\n    border-radius: 4px;\n  }\n\n  h3{\n    font-size: 16px;\n  }\n\n  p {\n    font-size: 14px;\n    margin: 0;\n    padding: 0;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCredits } from 'servicesApi/ApiMovies';\nimport { Ul, Li } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setLoading(true);\n        const {cast}= await getMovieCredits(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.error('Something went wrong with fetching cast on movie page', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && 'Loading...'}\n\n      {cast.length > 0 ? (\n        <Ul>\n          {cast.map(({ id, name, character, profile_path }) => {\n            let profileImg = `https://image.tmdb.org/t/p/w500${profile_path}`;\n\n            if (!profile_path) {\n              profileImg =\n                'https://images.emojiterra.com/google/noto-emoji/unicode-15/color/128px/2753.png';\n              name = `${name} (No Image Available)`;\n            }\n\n            return (\n              <Li key={id}>\n                <img src={profileImg} alt={name} />\n                <div>\n                  <h3>{name}</h3>\n                  <p>Character: {character}</p>\n                </div>\n              </Li>\n            );\n          })}\n        </Ul>\n      ) : (\n        <p>There is no information about actors for this movie.</p>\n      )}\n\n      {error && (\n        <div>\n          <h2>Please try again later.</h2>\n        </div>\n      )}\n    </div>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string,\n}\n\nexport default Cast;\n","import axios from 'axios';\n\n// FUNCIÓN CREA INSTANCIA CON DATOS BASICOS DE LA API PARA LAS CONSULTAS\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'd2c1d24020287e7b546fb1f2d1960a86',\n    language: 'en-US',\n  },\n});\n\n// FUNCIÓN TRAE INFORMACIÓN DE LAS PELICULAS POPULARES DEL MOMENTO\nexport async function getTrendingMovies() {\n  const query = `/trending/movie/week`;\n  try {\n    const { data } = await instance.get(query);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// FUNCIÓN TRAE INFORMACIÓN DE DETALLES DE LA PELICULA\nexport async function getMovieDetails(id) {\n  const query = `/movie/${id}`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// FUNCIÓN TRAE INFORMACIÓN DE LOS ACTORES\nexport async function getMovieCredits(id) {\n  const query = `/movie/${id}/credits`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// FUNCIÓN TRAE INFORMACIÓN DE RESEÑAS DE LAS PELICULAS\nexport async function getMovieReviews(id) {\n  const query = `/movie/${id}/reviews`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// FUNCIÓN TRAE INFORMACIÓN DE BUSQUEDA DE USUARIOS\nexport async function searchMovies(queryString) {\n  const query = `/search/movie?query=${queryString}`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["Ul","styled","Li","movieId","useParams","useState","cast","setCast","error","setError","loading","setLoading","useEffect","fetchCast","getMovieCredits","console","message","length","map","id","name","character","profile_path","profileImg","src","alt","instance","axios","baseURL","params","api_key","language","getTrendingMovies","get","data","results","getMovieDetails","query","getMovieReviews","searchMovies","queryString"],"sourceRoot":""}